{"version":3,"sources":["firebase.js","components/loginButton.js","components/grid.js","components/alreadyUsed.js","boggle_solver.js","components/fullGameBoard.js","components/challengesResponse.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LoginButton","setUser","onClick","provider","auth","GoogleAuthProvider","signInWithPopup","then","result","console","log","user","catch","error","logIn","Grid","props","grid","style","display","AlreadyUsed","word","util","require","Node","this","isValid","children","Map","Trie","dictionaryArray","root","insert","ptr","char","has","get","newNode","set","inspect","showHidden","depth","findWords","trie","gridd","array","hi","Array","from","tile","push","toLowerCase","Set","visited","boolean","subResult","i","length","createBooleanMatrix","entries","x","findWordsFrom","y","path","node","add","validMoves","possibleMove","newX","newY","getValidMoves","coordinate","FullGameBoard","useState","score","setScore","timeLeft","setTimeLeft","lastWordInputted","setLastWordInputted","isDisplayingAlreadyUsedWarning","setIsDisplayingAlreadyUsedWarning","correctAnswers","setCorrectAnswers","validWords","setValidWords","dictionary","setDictionary","usersHiscore","setUsersHiscore","worldRecord","setWorldRecord","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","actions","setSubmitting","resetForm","useEffect","jsonDictionary","words","singluarChallengeData","firestore","collection","doc","id","document","data","hiscore","uid","undefined","intervalId","setInterval","clearInterval","newScore","evaluateScore","merge","updateUsersScoreOnFirebaseIfNecessary","handleSubmit","htmlFor","autoComplete","name","type","onChange","handleChange","value","width","margin","forEach","str","stringify","sortedArray","sort","myArray","count","element","toFormattedArray","setA","setB","_difference","elem","delete","difference","map","fontSize","span","ChallengesResponse","params","dataList","setDataList","unsubscribe","onSnapshot","querySnapshot","firestoreData","setChallengeData","App","isCurrentlyPlayingGame","setIsCurrentlyPlayingGame","setGrid","challengeData","setSingluarChallengeData","didPressLoadChallenges","setDidPressLoadChallenges","message","color","backgroundColor","border","href","displayName","email","signOut","chars","cube","Math","floor","random","row","col","generateGrid","key","e","s","split","stringToGrid","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02b7e569.chunk.js","sourcesContent":["import firebase from 'firebase'; \n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyA_y3dK-fu50LsIiLcAsBhU20T28meRIjc\",\n    authDomain: \"boggle-solve-web-123.firebaseapp.com\",\n    databaseURL: \"https://boggle-solve-web-123.firebaseio.com\",\n    projectId: \"boggle-solve-web-123\",\n    storageBucket: \"boggle-solve-web-123.appspot.com\",\n    messagingSenderId: \"21556485825\",\n    appId: \"1:21556485825:web:a9d5e9621e946baf35be40\"\n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig); ","import React from 'react'; \nimport firebase from 'firebase';\n\nfunction LoginButton({setUser}) {\n\n    function logIn() {\n        var provider = new firebase.auth.GoogleAuthProvider(); \n        firebase.auth().signInWithPopup(provider).then(function(result) {\n            console.log(result.user);\n            setUser(result.user); \n        }).catch(function(error) {\n            console.log(error); \n        });\n    }\n\n    return (<button onClick={() => logIn()}>Login to access challenges and multiplayer!</button>);\n}\n\nexport default LoginButton;","import React from 'react';\n\nfunction Grid(props) {\n\n    const grid = props.grid;\n\n    return (<>\n        {grid ?\n        (<table style={{display: 'inline-block'}}>\n            <tbody>\n            <tr>\n                <td>\n                    { grid[0][0] }\n                </td>\n                <td>\n                    { grid[0][1] }\n                </td>\n                <td>\n                    { grid[0][2] }\n                </td>\n                <td>\n                    { grid[0][3] }\n                </td>\n                <td>\n                    { grid[0][4] }\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    { grid[1][0] }\n                </td>\n                <td>\n                    { grid[1][1] }\n                </td>\n                <td>\n                    { grid[1][2] }\n                </td>\n                <td>\n                    { grid[1][3] }\n                </td>\n                <td>\n                    { grid[1][4] }\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    { grid[2][0] }\n                </td>\n                <td>\n                    { grid[2][1] }\n                </td>\n                <td>\n                    { grid[2][2] }\n                </td>\n                <td>\n                    { grid[2][3] }\n                </td>\n                <td>\n                    { grid[2][4] }\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    { grid[3][0] }\n                </td>\n                <td>\n                    { grid[3][1] }\n                </td>\n                <td>\n                    { grid[3][2] }\n                </td>\n                <td>\n                    { grid[3][3] }\n                </td>\n                <td>\n                    { grid[3][4] }\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    { grid[4][0] }\n                </td>\n                <td>\n                    { grid[4][1] }\n                </td>\n                <td>\n                    { grid[4][2] }\n                </td>\n                <td>\n                    { grid[4][3] }\n                </td>\n                <td>\n                    { grid[4][4] }\n                </td>\n            </tr>\n            </tbody>\n        </table>) : (<div>Loading Grid!</div>)}\n    </>);\n}\n\nexport default Grid;","import React from 'react';\n\nfunction AlreadyUsed(props) {\n    return (<>\n        <div>\n            <h2>\n                {props.word} is already used!\n            </h2>\n        </div>\n    </>);\n}\n\nexport default AlreadyUsed;","const util = require(\"util\");\n// module.exports.findAllSolutions = findWords;\n// module.exports.generateTrie = generateTrie;\n\n// My Boggle solver is case sensitive. So 'Add' is treated as a different word from 'add'.\n\nclass Node {\n    constructor() {\n        this.isValid = false;\n        this.children = new Map();\n    }\n}\n\nclass Trie {\n    constructor(dictionaryArray) {\n        this.root = new Node();\n        for(const word of dictionaryArray) {\n            this.insert(word)\n        }\n    }\n    insert(word) {\n        let ptr = this.root;\n        for(const char of word) {\n            if(ptr.children.has(char)) {\n                ptr = ptr.children.get(char);\n            } else {\n                let newNode = new Node();\n                ptr.children.set(char, newNode);\n                ptr = newNode;\n            }\n        }\n        ptr.isValid = true;\n    }\n    printTrie() {\n        console.log(util.inspect(this.root, {showHidden: false, depth: null}));\n    }\n}\n\nexport function findWords(grid, trie) {\n    let gridd = [];\n    for(const array of grid) {\n        let hi = [];\n        for(const tile of Array.from(array)) {\n            hi.push(tile.toLowerCase());\n        }\n        gridd.push(hi);\n    }\n    let result = new Set();\n    let visited = createBooleanMatrix(grid, false);\n    for(const [x, array] of gridd.entries()) {\n        for(const [y, tile] of Array.from(array).entries()) {\n            findWordsFrom(x, y, tile.toLowerCase(), gridd, visited, trie.root, result);\n        }\n    }\n    return result;\n}\n\nexport function generateTrie(dictionaryArray) {\n    return new Trie(dictionaryArray);\n}\n\nfunction findWordsFrom(x, y, path, grid, visited, node, result) {\n    let ptr = node;\n    for(let char of grid[x][y]) {\n        if(ptr.children.has(char)) {\n            ptr = ptr.children.get(char);\n        } else {\n            return;\n        }\n    }\n    visited[x][y] = true;\n    if(ptr.isValid && path.length > 2) {\n        result.add(path);\n    }\n    let validMoves = getValidMoves(x, y, grid, visited);\n    for(const coordinate of validMoves) {\n        let x = coordinate[0];\n        let y = coordinate[1];\n        let tile = grid[x][y];\n        findWordsFrom(x, y, path + tile, grid, visited, ptr, result);\n    }\n    visited[x][y] = false;\n}\n\nfunction getValidMoves(x, y, grid, visited) {\n    const possibleMoves = [\n        [x-1, y],\n        [x-1, y+1],\n        [x, y+1],\n        [x+1, y+1],\n        [x+1, y],\n        [x+1, y-1],\n        [x, y-1],\n        [x-1, y-1]\n    ];\n    let result = [];\n    for(const possibleMove of possibleMoves) {\n        const newX = possibleMove[0];\n        const newY = possibleMove[1];\n        if(newX >= 0 && newX < grid.length && newY >= 0 && newY < grid[newX].length && !visited[newX][newY]) {\n            result.push([newX, newY]);\n        }\n    }\n    return result;\n}\n\nfunction createBooleanMatrix(grid, boolean) {\n    let result = [];\n    for(const array of grid) {\n        let subResult = [];\n        for(let i=0; i<array.length; i++) {\n            subResult.push(boolean);\n        }\n        result.push(subResult)\n    }\n    return result\n}\n","import React, { useState, useEffect } from 'react';\nimport Grid from './grid';\nimport AlreadyUsed from './alreadyUsed';\nimport { useFormik } from 'formik';\nimport { findWords, generateTrie } from '../boggle_solver';\nimport jsonDictionary from '../full-wordlist';\nimport 'antd/dist/antd.css';\nimport {Col, Row} from \"antd\";\nimport firebase from 'firebase';\n\nfunction FullGameBoard(props) {\n\n    // ==================\n    // MARK: - Use States\n    // ==================\n\n    const [score, setScore] = useState(0);\n    const [timeLeft, setTimeLeft] = useState(20);\n    const [lastWordInputted, setLastWordInputted] = useState(\"\");\n    const [isDisplayingAlreadyUsedWarning, setIsDisplayingAlreadyUsedWarning] = useState(false);\n    const [correctAnswers, setCorrectAnswers] = useState(new Set());\n    const [validWords, setValidWords] = useState(new Set());\n    const [dictionary, setDictionary] = useState(null);\n    const [usersHiscore, setUsersHiscore] = useState(null);\n    const [worldRecord, setWorldRecord] = useState(null);\n\n    // =================\n    // MARK: - Constants\n    // =================\n\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: { word: \"\" },\n        onSubmit: (values, actions) => {\n            // Setting twice to make sure the use effect is triggered.\n            setLastWordInputted(\"\");\n            setLastWordInputted(values.word.toLowerCase());\n            formik.values.word = \"\";\n            actions.setSubmitting(false);\n            actions.resetForm();\n        }\n    });\n\n    // ===================\n    // MARK: - Use Effects\n    // ===================\n\n    useEffect(() => {\n        setDictionary(generateTrie(jsonDictionary.words));\n        if(props.singluarChallengeData) {\n            firebase.firestore().collection(\"challenges\").doc(props.singluarChallengeData.id).get().then(document=> {\n                setWorldRecord(document.data().hiscore);\n            });\n            firebase.firestore().collection(\"challenges\").doc(props.singluarChallengeData.id).collection(\"scores\").doc(props.user.uid).get().then(document=> {\n                if(document.data() !== undefined) {\n                    setUsersHiscore(document.data().score);\n                } else {\n                    firebase.firestore().collection(\"challenges\").doc(props.singluarChallengeData.id).collection(\"scores\").doc(props.user.uid).set({\"score\": 0});\n                    setUsersHiscore(0);\n                }\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        if (timeLeft === 0) { return; }\n        const intervalId = setInterval(() => {\n            setTimeLeft(timeLeft - 1);\n        }, 1000);\n        return () => {\n            clearInterval(intervalId);\n        }\n    }, [timeLeft]);\n\n    useEffect(() => {\n        if (props.grid === null || dictionary === null) { return; }\n        setValidWords(findWords(props.grid, dictionary));\n    }, [props.grid, dictionary]);\n\n    useEffect(() => {\n        if (validWords.has(lastWordInputted)) {\n            if (correctAnswers.has(lastWordInputted)) {\n                setIsDisplayingAlreadyUsedWarning(true);\n                return;\n            }\n            setCorrectAnswers(correctAnswers.add(lastWordInputted));\n            let newScore = score + evaluateScore(lastWordInputted);\n            setScore(newScore);\n            updateUsersScoreOnFirebaseIfNecessary(newScore);\n        }\n        setIsDisplayingAlreadyUsedWarning(false);\n    }, [lastWordInputted, correctAnswers, validWords]);\n\n    // ===============\n    // MARK: Functions\n    // ===============\n\n    function updateUsersScoreOnFirebaseIfNecessary(score) {\n        if(props.singluarChallengeData == null) { return; }\n        if(props.user === null) { return; }\n        if(usersHiscore === null) { return; }\n        if(worldRecord === null) { return; }\n        if(score > usersHiscore) {\n            firebase.firestore().collection(\"challenges\").doc(props.singluarChallengeData.id).collection(\"scores\").doc(props.user.uid).set({\n                \"score\": score\n            }, { merge: true }).then(() => {\n                console.log(\"Score written!\"); \n                setUsersHiscore(score);\n            }).catch((error) => {\n                console.error(\"Error adding document: \", error); \n            });\n            if (score > worldRecord) {\n                firebase.firestore().collection(\"challenges\").doc(props.singluarChallengeData.id).set({\n                    \"hiscore\": score\n                }, { merge: true }).then(() => {\n                    console.log(\"Hiscore written!\"); \n                    setUsersHiscore(score);\n                }).catch((error) => {\n                    console.error(\"Error adding document: \", error); \n                });\n            }\n        }\n    }\n\n    function difference(setA, setB) {\n        if(setA && setB) {\n            let _difference = new Set(setA);\n            for (const elem of setB) {\n                _difference.delete(elem)\n            }\n            return _difference\n        }\n        return [];\n    }\n\n    function evaluateScore(word) {\n        switch(word.length) {\n            case 0: return 0;\n            case 1: return 0;\n            case 2: return 0;\n            case 3: return 100;\n            case 4: return 300;\n            case 5: return 600;\n            case 6: return 1000;\n            case 7: return 1500;\n            case 8: return 2100;\n            case 9: return 2800;\n            default: return 5000;\n        }\n    }\n\n    function stringify(collection) {\n        let result = '';\n        collection.forEach(str => {\n            result += str + '\\n';\n        });\n        return result;\n    }\n\n    function toFormattedArray(array) {\n        let sortedArray = array.sort();\n        let result = [];\n        let myArray = [];\n        let count = 0;\n        for(const element of sortedArray) {\n            myArray.push(element);\n            count += 1;\n            if(count === 6) {\n                result.push(myArray);\n                myArray = [];\n                count = 0;\n            }\n        }\n        return result;\n    }\n\n    // =========\n    // MARK: JSX\n    // =========\n\n    return (<>\n        <div>\n            {props.singluarChallengeData !== null && <div>Your Hiscore for this challenge: {usersHiscore}</div>}\n            <div>Score: {score}</div>\n            <div>Time: {timeLeft}</div>\n            {isDisplayingAlreadyUsedWarning && <AlreadyUsed word={lastWordInputted}></AlreadyUsed>}\n        </div>\n\n        {timeLeft !== 0 ? (\n            <div>\n                <Grid grid={props.grid}></Grid>\n                <form onSubmit={formik.handleSubmit} id='wordInput'>\n                    <label htmlFor=\"word\"></label>\n                    <input\n                        autoComplete=\"off\"\n                        id=\"word\"\n                        name=\"word\"\n                        type=\"word\"\n                        onChange={formik.handleChange}\n                        value={formik.values.word}\n                    />\n                    <button type=\"submit\">Submit</button>\n                </form>\n                <div><br/></div>\n                <h2 style={{width: '60%', margin: '0 20% 0 20%'}}>Correct Answers: { stringify(correctAnswers) }</h2>\n            </div>\n        ) : (\n            <div>\n                <h2><u><b>Remaining Answers:</b></u></h2>\n                <div><br/></div>\n                <h3>\n                    {toFormattedArray(Array.from(difference(validWords, correctAnswers))).map(function(element, i) {\n                        return(<Row style={{width: '60%', fontSize: '12px', margin: '0 20% 0 20%'}}>\n                            <Col span={4}>{element[0]}</Col>\n                            <Col span={4}>{element[1]}</Col>\n                            <Col span={4}>{element[2]}</Col>\n                            <Col span={4}>{element[3]}</Col>\n                            <Col span={4}>{element[4]}</Col>\n                            <Col span={4}>{element[5]}</Col>\n                        </Row>);\n                    })}\n                </h3>\n            </div>\n        )}\n    </>);\n\n}\n\nexport default FullGameBoard;\n","import React, { useState, useEffect } from 'react'; \nimport firebase from 'firebase';\n\nconst ChallengesResponse = params => {\n\n    // ==================\n    // MARK: - Use States\n    // ==================\n\n    const [dataList, setDataList] = useState([]);\n\n    // ===================\n    // MARK: - Use Effects\n    // ===================\n\n    useEffect(() => {\n        console.log(\"A called\");\n        const unsubscribe = firebase.firestore().collection(\"challenges\").onSnapshot((querySnapshot) => {\n            var firestoreData = []; \n            querySnapshot.forEach(function(doc) {\n                firestoreData.push({\n                    id: doc.id,\n                    grid: doc.data().grid,\n                    hiscore: doc.data().hiscore,\n                    name: doc.data().name\n                }); \n            });\n          setDataList(firestoreData);\n        });\n        return () => unsubscribe() \n    }, [])\n\n    useEffect(() => {\n        console.log(\"B called\");\n        params.setChallengeData(dataList);\n    }, [dataList])\n\n    return <></>\n\n };\n\nexport default ChallengesResponse;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { Alert } from 'antd';\nimport LoginButton from './components/loginButton.js';\nimport FullGameBoard from './components/fullGameBoard';\nimport ChallengesResponse from './components/challengesResponse';\nimport firebase from 'firebase';\n\nfunction App() {\n\n  // ==================\n  // MARK: - Use States\n  // ==================\n\n  const [user, setUser] = useState(null);\n  const [isCurrentlyPlayingGame, setIsCurrentlyPlayingGame] = useState(false);\n  const [grid, setGrid] = useState(null);\n  const [challengeData, setChallengeData] = useState([]);\n  const [singluarChallengeData, setSingluarChallengeData] = useState(null);\n  const [didPressLoadChallenges, setDidPressLoadChallenges] = useState(false);\n\n  // ===================\n  // MARK: - Use Effects\n  // ===================\n\n  useEffect(() => {\n    console.log(\"First Render\");\n  }, []);\n\n  // ===============\n  // MARK: Functions\n  // ===============\n\n  function toggleLocalPlayerGame() {\n    if(isCurrentlyPlayingGame) {\n      setDidPressLoadChallenges(false);\n    }\n    setIsCurrentlyPlayingGame(!isCurrentlyPlayingGame);\n    setSingluarChallengeData(null);\n    setGrid(generateGrid());\n  }\n\n  function toggleChallengeGame(e) {\n    setIsCurrentlyPlayingGame(!isCurrentlyPlayingGame);\n    setSingluarChallengeData(e);\n    setGrid(stringToGrid(e.grid));\n  }\n\n  function loadChallenges() {\n    setDidPressLoadChallenges(true);\n  }\n\n  function logout() {\n    firebase.auth().signOut().then(function() {\n      console.log(\"Logged out.\");\n      setUser(null);\n    }).catch(function(error) {\n      console.log(error);\n    });\n  }\n\n  function generateGrid() {\n    const dice = [\"AAAFRS\", \"AAEEEE\", \"AAFIRS\", \"ADENNN\", \"AEEEEM\",\n      \"AEEGMU\", \"AEGMNN\", \"AFIRSY\", \"BJKQXZ\", \"CCNSTW\",\n      \"CEIILT\", \"CEILPT\", \"CEIPST\", \"DHHNOT\", \"DHHLOR\",\n      \"DHLNOR\", \"DDLNOR\", \"EIIITT\", \"EMOTTT\", \"ENSSSU\",\n      \"FIPRSY\", \"GORRVW\", \"HIPRRY\", \"NOOTUW\", \"OOOTTU\"];\n    let chars = dice.map(cube => cube[Math.floor(Math.random() * cube.length)]);\n    chars.sort(() => Math.random() - 0.5); // Shuffle the letters.\n    const SIZE = 5;\n    let grid = [];\n    for (let row = 0; row < SIZE; row++) {\n      grid[row] = [];\n      for (let col = 0; col < SIZE; ++col) {\n        grid[row][col] = chars[SIZE * row + col];\n        if (grid[row][col] === \"Q\") grid[row][col] = \"Qu\";\n      }\n    }\n    return grid;\n  }\n\n  function stringToGrid(s) {\n    if (s.length !== 25) { return }\n    let chars = s.split('');\n    const SIZE = 5;\n    let grid = [];\n    for (let row = 0; row < SIZE; row++) {\n      grid[row] = [];\n      for (let col = 0; col < SIZE; ++col) {\n        grid[row][col] = chars[SIZE * row + col]\n        if (grid[row][col] === \"Q\") grid[row][col] = \"Qu\";\n      }\n    }\n    return grid;\n  }\n\n    // =========\n    // MARK: JSX\n    // =========\n\n  return (<>\n    <br/>\n    <Alert\n        message=\"Boggle Solve Web\"\n        type='warning'\n        style={{width: '400px', display: 'inline-block', color: 'black', backgroundColor: '#FFCD00', border: '1px solid black', fontSize: '40px'}}\n    />\n    <h2><u><a style={{color: '#A84F31'}} href=\"https://apps.apple.com/us/app/boggle-solve/id1496483167\">Mobile app here!</a></u></h2>\n    {user && isCurrentlyPlayingGame &&\n      <div>Welcome, {user.displayName} ({user.email})</div>\n    }\n    {user && !isCurrentlyPlayingGame &&\n      <div>Welcome, {user.displayName} ({user.email})<button onClick={ logout }>Logout</button></div>\n    }\n    <br/><br/>\n    <button onClick={ toggleLocalPlayerGame }> { isCurrentlyPlayingGame ? ('Main Menu') : ('New Local Game') } </button>\n    <br/><br/>\n    {user === null && !isCurrentlyPlayingGame &&\n      <LoginButton setUser={(user) => setUser(user)} />\n    }\n    {user !== null && !didPressLoadChallenges && !isCurrentlyPlayingGame &&\n      <>\n      <button onClick={ loadChallenges }>Load Challenges</button>\n      <ChallengesResponse setChallengeData={setChallengeData}/>\n      </>\n    }\n    {user !== null && challengeData.length > 0 && didPressLoadChallenges && !isCurrentlyPlayingGame &&\n      challengeData.map((data) => {\n        return (<div key={data.name}>\n          <button onClick={() => toggleChallengeGame(data)}>\n            {data.name} (world record: {data.hiscore})\n          </button><br/><br/>\n        </div>) \n      })\n    }\n    {isCurrentlyPlayingGame && grid ? (<FullGameBoard grid={grid} user={user} singluarChallengeData={singluarChallengeData}/>) : (<div></div>)}\n  </>);\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './firebase.js';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}